package com.checkapp.services.gateways.outbound.persistence.jpa;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;

import java.time.LocalDateTime;

@Entity
@Getter
@Setter
@Table(name = "incident")
public class IncidentEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String description;
    private String rootCause;
    private String criticite;

    private LocalDateTime dateDebut;
    private LocalDateTime dateResolution;

    private String resume;
    private String impact;
    private String solution;

    private String status;
    private String lien;
    private String type;
}



***********
package com.checkapp.services.gateways.outbound.persistence.jpa;

import org.springframework.data.jpa.repository.JpaRepository;

public interface IncidentJpaRepository extends JpaRepository<IncidentEntity, Long> {

    // Exemples de méthodes personnalisées si tu veux filtrer
    IncidentEntity findByLien(String lien);

    // Ajouter d'autres requêtes personnalisées si besoin...
}

//////
package com.socgen.unibank.services.core.repository;

import com.socgen.unibank.services.api.model.CreateIncidentResponse;
import com.socgen.unibank.services.gateways.outbound.persistence.jpa.IncidentEntity;

import java.util.List;
import java.util.Optional;

public interface IncidentRepository {
    IncidentEntity save(IncidentEntity incident);
    CreateIncidentResponse mapToDto(IncidentEntity incident);

    List<CreateIncidentResponse> getAllIncidents();
    Optional<CreateIncidentResponse> getIncidentDetails(Long id);

    void deleteById(Long id);
}
**********
package com.checkapp.services.core.utils;

import com.checkapp.services.api.model.CreateIncidentResponse;
import com.checkapp.services.gateways.outbound.persistence.jpa.IncidentEntity;
import com.checkapp.services.gateways.outbound.persistence.jpa.IncidentJpaRepo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Repository
public class IncidentRepositoryImpl implements IncidentRepository {

    private final IncidentJpaRepo incidentJpaRepo;

    @Autowired
    public IncidentRepositoryImpl(IncidentJpaRepo incidentJpaRepo) {
        this.incidentJpaRepo = incidentJpaRepo;
    }

    @Override
    public IncidentEntity save(IncidentEntity incident) {
        return incidentJpaRepo.save(incident);
    }

    @Override
    public Optional<IncidentEntity> findById(Long id) {
        return incidentJpaRepo.findById(id);
    }

    @Override
    public List<IncidentEntity> findAll() {
        return incidentJpaRepo.findAll();
    }

    @Override
    public void deleteById(Long id) {
        incidentJpaRepo.deleteById(id);
    }

    @Override
    public CreateIncidentResponse mapToDto(IncidentEntity entity) {
        CreateIncidentResponse response = new CreateIncidentResponse();
        response.setId(entity.getId());
        response.setDescription(entity.getDescription());
        response.setRootCause(entity.getRootCause());
        response.setCriticite(entity.getCriticite());
        response.setDateDebut(entity.getDateDebut());
        response.setResume(entity.getResume());
        response.setImpact(entity.getImpact());
        response.setDateResolution(entity.getDateResolution());
        response.setSolution(entity.getSolution());
        response.setStatus(entity.getStatus());
        response.setLien(entity.getLien());
        response.setType(entity.getType());
        return response;
    }
}
*****************
