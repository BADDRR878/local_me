Après analyse et vérification, nous avons constaté plusieurs tentatives de changement de mot de passe au cours des 10 derniers jours, dont les messages sont restés en attente avant d’expirer.
Merci de vérifier que le numéro se terminant par *62 est bien actif et couvert par l’opérateur Orange BF.
Si ce n’est pas le cas, merci de mettre à jour le numéro dans le contrat, puis de refaire une demande de réinitialisation du mot de passe pour que le client puisse recevoir son code d’activation.

Après vérification de l’état du contrat du client et analyse des logs, je vous confirme que la relation a bien reçu son code d’activation ainsi que des codes de vérification le 03 juin, accompagnés d’une notification de tentative de connexion.
Nous vous invitons à vérifier si le numéro du client est actif et bien couvert par l’opérateur MTN CI afin de garantir la bonne réception des messages.

Nous avons constaté que plusieurs tickets rencontrent des problèmes liés à l’opérateur Orange BF.
Après analyse, il semble que les messages restent en attente puis expirent, ce qui indique un souci potentiel au niveau de la livraison par l’opérateur.
Une communication est en cours avec les équipes Infobip afin d’identifier et de mieux comprendre l’origine de ce dysfonctionnement.




// core/ports/in/ImportJiraDataUseCase.java
package com.checkapp.core.ports.in;

import com.checkapp.core.domain.entities.Incident;
import java.util.List;

public interface ImportJiraDataUseCase {
    List<Incident> importIncidents(String jqlFilter);
    void syncAllData();
    ImportResult importWithFilter(ImportRequest request);
}

// core/ports/in/ImportRequest.java
package com.checkapp.core.ports.in;

public class ImportRequest {
    private String jqlFilter;
    private String businessLine;
    private boolean incrementalSync;
    
    public ImportRequest(String jqlFilter, String businessLine, boolean incrementalSync) {
        this.jqlFilter = jqlFilter;
        this.businessLine = businessLine;
        this.incrementalSync = incrementalSync;
    }
    
    // Getters et setters
    public String getJqlFilter() { return jqlFilter; }
    public void setJqlFilter(String jqlFilter) { this.jqlFilter = jqlFilter; }
    
    public String getBusinessLine() { return businessLine; }
    public void setBusinessLine(String businessLine) { this.businessLine = businessLine; }
    
    public boolean isIncrementalSync() { return incrementalSync; }
    public void setIncrementalSync(boolean incrementalSync) { this.incrementalSync = incrementalSync; }
}

// core/ports/in/ImportResult.java
package com.checkapp.core.ports.in;

import java.util.List;

public class ImportResult {
    private int totalImported;
    private int totalSkipped;
    private int totalErrors;
    private List<String> errorMessages;
    private boolean success;
    
    public ImportResult(int totalImported, int totalSkipped, int totalErrors, 
                       List<String> errorMessages, boolean success) {
        this.totalImported = totalImported;
        this.totalSkipped = totalSkipped;
        this.totalErrors = totalErrors;
        this.errorMessages = errorMessages;
        this.success = success;
    }
    
    // Getters et setters
    public int getTotalImported() { return totalImported; }
    public int getTotalSkipped() { return totalSkipped; }
    public int getTotalErrors() { return totalErrors; }
    public List<String> getErrorMessages() { return errorMessages; }
    public boolean isSuccess() { return success; }
}

// core/ports/out/JiraGateway.java
package com.checkapp.core.ports.out;

import com.checkapp.core.domain.entities.Incident;
import java.util.List;
import java.util.Optional;

public interface JiraGateway {
    List<Incident> fetchIncidentsByJql(String jqlQuery);
    Optional<Incident> fetchIncidentById(String incidentId);
    List<Incident> fetchRecentIncidents(int hours);
    boolean testConnection();
}

// core/ports/out/IncidentRepository.java
package com.checkapp.core.ports.out;

import com.checkapp.core.domain.entities.Incident;
import java.util.List;
import java.util.Optional;

public interface IncidentRepository {
    void save(Incident incident);
    void saveAll(List<Incident> incidents);
    Optional<Incident> findById(String id);
    List<Incident> findByBusinessLine(String businessLine);
    List<Incident> findByPriorite(String priorite);
    boolean existsById(String id);
    void deleteById(String id);
    List<Incident> findAll();
}

// core/ports/out/ApplicationRepository.java
package com.checkapp.core.ports.out;

import com.checkapp.core.domain.entities.Application;
import java.util.Optional;

public interface ApplicationRepository {
    void save(Application application);
    Optional<Application> findById(String id);
    Optional<Application> findByNom(String nom);
    boolean existsById(String id);
}

// core/ports/out/FilialeRepository.java
package com.checkapp.core.ports.out;

import com.checkapp.core.domain.entities.Filiale;
import java.util.Optional;

public interface FilialeRepository {
    void save(Filiale filiale);
    Optional<Filiale> findById(String id);
    Optional<Filiale> findByNom(String nom);
    boolean existsById(String id);
}
@Tag(name = "Incidents")
@RequestMapping(name = "incidents", produces = "application/json")
public interface CheckappAPI extends CreateIncident {

    @Operation(
        summary = "Créer un nouvel incident",
        parameters = {
            @Parameter(ref = "entityIdHeader", required = true)
        }
    )
    @PostMapping("/incident")
    @Override
    IncidentResponse handle(@RequestBody IncidentRequest input, RequestContext ctx);
}
Après vérification, l’état du client est stable. Suite à sa demande de changement de mot de passe effectuée le 23/05, un message a bien été envoyé le même jour à 16h47. Si le client rencontre toujours un problème, il est possible que cela soit lié à son opérateur.


Afin de s’assurer du bon fonctionnement de la messagerie, nous vous invitons à effectuer un nouveau changement de mot de passe, et à demander au client de vérifier les points suivants de son côté :

Redémarrer le téléphone

Retirer puis réinsérer la carte SIM

Supprimer les anciens messages du téléphone

Passer un appel pour vérifier la disponibilité du réseau


Concernant le client ayant l’ID client 1000220147 et le Digital ID 1114054, après analyse et vérification, il apparaît que la dernière tentative de changement de mot de passe a été effectuée avant la mise à jour réussie du contrat (changement de numéro de téléphone). Par conséquent, le message a été envoyé à l’ancien numéro et a expiré.

Nous vous invitons à effectuer un nouveau changement de mot de passe, afin qu’il soit envoyé et reçu sur le numéro actuellement associé au contrat.


